#!/bin/bash
# teiler - A script to share (german word: teilen) screenshots/casts for tiling WMs - Pun intended
# (c) Rasmus Steinke <rasi at xssn dot at>
# Additional Ideas and testing by Zeltak <zeltak at gmail dot com>
#
# Requirements:
# xclip, dzen2, dmenu, ffmpeg, scrot, bc, some notification daemon
#
# Optional dependencies:
# Some image editing tool, scp or fb-client



# check dependencies

if [[ -f $HOME/.config/teiler/config ]];
    then echo "Config found"
else
    echo "No config found" && echo "No config found"
    echo "Please copy config.example to ~/.config/teiler/config"
    echo "Please copy config.example to ~/.config/teiler/config"
    echo "Terminating..."
    echo " "
    killall teiler
fi

if [[ -d $HOME/.local/share/teiler ]];
    then echo "data directory found"
else
    mkdir $HOME/.local/share/teiler
    touch $HOME/.local/share/teiler/temp_cast
fi


command -v dmenu >/dev/null 2>&1 || {
    echo "dmenu is  not installed. Aborting." >&2; exit 1;
}

command -v dzen2 >/dev/null 2>&1 || {
    echo "teiler" "dzen2 is not installed. Aborting" >&2; exit 1;
}

up1=`command -v scp`
up2=`command -v fb`
if [[ -n "$up1" || -n "$up2" ]];
    then echo "fb or scp found - great!"
    else echo "neither fb or scp found"
    echo "no fb or scp found - please make sure to use imgur in config"
fi

command -v ffmpeg >/dev/null 2>&1 || {
    echo "ffmpeg is not installed. Aborting" >&2; exit 1;
}

command -v scrot >/dev/null 2>&1 || {
    echo "scrot is not installed. Aborting" >&2; exit 1; }

command -v bc >/dev/null 2>&1 || { 
    echo "bc is not installed. Aborting" >&2; exit 1;
}

echo "Please create a hotkey for teiler. You will know why, eventually :)"

source ~/.config/teiler/config
echo "Font used: $font"



# functions

# Some Variables to clean up the code a bit
now=$(date +"%Y%m%d%H%M%S")

# function used for four countdowns
function countdown1 () {
    for i in `seq $counter1 -1 0`; do echo "$i ... GO!"; sleep 1; done
}
function countdown2 () {
    for i in `seq $counter2 -1 0`; do echo "$i ... GO!"; sleep 1; done
}
function countdown3 () {
    for i in `seq $counter3 -1 0`; do echo "$i ... GO!"; sleep 1; done
}
function archive_ul() {
    if [ "$archive_ul" == "1" ]; then
        cp "$img_path"/lastimg.png "$img_path"/"$filemask".png
    else echo ""
fi
}


#set dmenu options based on transparency support in config file
function dmenu_t () {
choice="$(echo "$menu" | simpleswitcher -font "PragmataPro-10" -fg "#505050" -bg "#000000" -hlfg "#FFFFFF" -hlbg "#0C73C2" -o 90 -bc "#505050" -dmenu teiler)"
}


# functions used for archiving the different file types
function archive_clip() {
    if [ "$archive_clip" == "1" ]; then
        cp "$img_path"/lastimg.png "$img_path"/"$filemask".png
    else echo ""
    fi
}

function archive_img() {
    if [ "$archive_img" == "1" ]; then
        cp "$img_path"/lastimg.png "$img_path"/"$filemask".png
    else echo ""
    fi
}


# notification functions
function notify() {
    if [[ -n "$dunst_fg" ]]
        then notify-send -u low -h string:bgcolor:$dunst_bg -h string:fgcolor:$dunst_fg --hint=int:transient:1 -t ${1} "teiler" "${2}"
    else notify-send -u low --hint=int:transient:1 -t ${1} "teiler" "${2}"
    fi
}

function notify_ul() {
    if [[ -n "$dunst_fg" ]]
        then notify-send -u low -h string:bgcolor:$dunst_bg -h string:fgcolor:$dunst_fg --hint=int:transient:1 -t ${1} "teiler" "${2}\n$(xclip -o)"
    else
        notify-send -u low --hint=int:transient:1 -t ${1} "teiler" "${2}\n$(xclip -o)"
    fi
}


# this shows a little dzen2 widget to indicate that a screencast is happening right now
function rec_indicator() {
    while true; do
        source ~/.config/teiler/config
            if pgrep -f x11grab; then
                echo "$rec_text"
            elif pgrep -f byzanz-record; then
                echo "$rec_text"
            else
                echo ""
            fi
        sleep 1
    done | dzen2 -fn "$rec_font" -fg "$rec_nf" -bg "$rec_sf" -w "$rec_w" -x "$rec_x" -y "$rec_y" -p &
}



# Get Dimensions of active Window
function dimensions() {
    unset x y w h
    eval $(xwininfo -id $(xdotool getactivewindow) |
    sed -n -e "s/^ \+Absolute upper-left X: \+\([0-9]\+\).*/x=\1/p" \
           -e "s/^ \+Absolute upper-left Y: \+\([0-9]\+\).*/y=\1/p" \
           -e "s/^ \+Width: \+\([0-9]\+\).*/w=\1/p" \
           -e "s/^ \+Height: \+\([0-9]\+\).*/h=\1/p" )
}


# Some options depending which uploader is used (right now only fb and scp are supported)
if [ $ul == "fb" ]; then
    ul_img="fb -n $filemask lastimg.png"
    ul_vid="fb $(cat ~/.local/share/teiler/temp_cast)"
    ul_clip="fb clip-$now.txt #&& rm -f clip-$now.txt"
elif [ $ul == "scp" ]; then
    ul_img="echo $(date +"%Y%m%d%H%M%S") > ~/.local/share/teiler/timestamp
            scp "$img_path"/lastimg.png "$ulhost_img/$(cat ~/.local/share/teiler/timestamp).png" &&
            echo -n "$url_img/$(cat ~/.local/share/teiler/timestamp).png" | xclip"
    ul_vid="scp $(cat ~/.local/share/teiler/temp_cast) $ulhost_vid &&
            echo -n "$url_vid/$(cat ~/.local/share/teiler/temp_cast)" | xclip"
    ul_clip="scp clip-$now.txt $ulhost_paste && echo -n "$url_paste/clip-$now.txt" | xclip"
elif [ $ul == "imgur" ]; then
    ul_img="curl -s -F "image=@lastimg.png" -F "key=486690f872c678126a2c09a9e196ce1b" \
    https://imgur.com/api/upload.xml > ~/.local/share/teiler/imgur.xml
    xmllint ~/.local/share/teiler/imgur.xml --xpath '//original_image/text\()' | xclip"
else
    echo "no supported uploader" && notify-send "teiler" "No supported Uploader"
fi

if [ "$dzen2_trans" == "1" ]; then
    countd="countdown1 | dzen2 -o 80 -fn '$dzen2_font' -fg '$nf' -ta c -w '$dzen2_w' -bg '$nb' -x '$dzen2_x' -y '$dzen2_y'"
    countd2="countdown2 | dzen2 -o 80 -fn '$dzen2_font' -fg '$nf' -ta c -w '$dzen2_w' -bg '$nb' -x '$dzen2_x' -y '$dzen2_y'"
    countd3="countdown3 | dzen2 -o 80 -fn '$dzen2_font' -fg '$nf' -ta c -w '$dzen2_w' -bg '$nb' -x '$dzen2_x' -y '$dzen2_y'"
else 
    countd="countdown1 | dzen2 -fn '$dzen2_font' -fg '$nf' -ta c -w '$dzen2_w' -bg '$nb' -x '$dzen2_x' -y '$dzen2_y'"
    countd2="countdown2 | dzen2 -fn '$dzen2_font' -fg '$nf' -ta c -w '$dzen2_w' -bg '$nb' -x '$dzen2_x' -y '$dzen2_y'"
    countd3="countdown3 | dzen2 -fn '$dzen2_font' -fg '$nf' -ta c -w '$dzen2_w' -bg '$nb' -x '$dzen2_x' -y '$dzen2_y'"
fi

# this copies clipboard content to both clipboard buffers
x_clip="(xclip -o) | xclip -selection clipboard"




# Beginning of the actual script :)
cd $img_path

menu="
1. Screenshots
2. Screenshots (Upload)
3. Screencasts
-------------------------------------
f. Quick Screenshot (Fullscreen)
a. Quick Screenshot (Area)
c. Quick Screencast
x. Upload Clipboard content (Delayed)
k. Stop Recording Of Any Screencast
i. Copy Last Image To Clipboard
"

dmenu_t

case "$choice" in
    "1. Screenshots")
menu="
1. Fullscreen
2. Fullscreen (Edit)
3. Fullscreen (Delayed)
4. Fullscreen (Delayed & Edit)
5. Area
6. Area (Edit)




"

dmenu_t

case "$choice" in
    "1. Fullscreen")
         scrot -d 1 lastimg.png
         notify ${time} "Screenshot saved"  
         archive_img
   ;;
    "2. Fullscreen (Edit)")
         scrot -d 1 lastimg.png -e "$edit \$f"
         eval $x_clip
         notify ${time} "Screenshot saved"
         archive_img
   ;;
    "3. Fullscreen (Delayed)")
         eval $countd & sleep $(echo $counter1+1 | bc)
         scrot -d 1 lastimg.png
         notify ${time} "Screenshot saved"
         archive_img
   ;;
    "4. Fullscreen (Delayed & Edit)")
         eval $countd & sleep $(echo $counter1+1 | bc)
         scrot -d 1 lastimg.png -e "$edit \$f"
         notify ${time} "Screenshot saved"
         archive_img
   ;;
    "5. Area")
         scrot -s lastimg.png
         notify ${time} "Screenshot saved"
         archive_img
   ;;
    "6. Area (Edit)")
        scrot -s lastimg.png -e "$edit \$f"
        eval $x_clip
        notify ${time} "Screenshot saved"
        archive_img
;;
*)
$0
esac
;;
"2. Screenshots (Upload)")
menu="
1. Fullscreen
2. Fullscreen \(Edit\)
3. Fullscreen \(Delayed\)
4. Fullscreen \(Delayed & Edit\)
5. Area
6. Area \(Edit\)




"

dmenu_t

case "$choice" in
    "1. Fullscreen")
         scrot -d 1 lastimg.png -e "$ul_img"
         eval $x_clip
         notify_ul ${time} "Screenshot uploaded"
         archive_ul
   ;;
    "2. Fullscreen (Edit)")
         scrot -d 1 lastimg.png -e "$edit \$f && $ul_img"
         eval $x_clip && notify_ul ${time} "Screenshot uploaded"
         archive_ul
   ;;
    "3. Fullscreen (Delayed)")
         eval $countd & sleep $(echo $counter1+1 | bc)
         scrot -d 1 lastimg.png -e "$ul_img"
         eval $x_clip && notify_ul ${time} "Screenshot uploaded"
         archive_ul
   ;;
    "4. Fullscreen (Delayed & Edit)")
         eval $countd & sleep $(echo $counter1+1 | bc)
         scrot -d 1 lastimg.png -e "$edit \$f && $ul_img"
         eval $x_clip
         notify_ul ${time} "Screenshot uploaded"
         archive_ul
   ;;
    "5. Area")
         scrot -s lastimg.png -e "$ul_img"
         eval $x_clip
         notify_ul ${time} "Screenshot uploaded"
         archive_ul
   ;;
    "6. Area (Edit)")
        scrot -s lastimg.png -e "$edit \$f && $ul_img"
        eval $x_clip
        notify_ul ${time} "Screenshot uploaded"
        archive_ul
   ;;
*)
$0
esac
;;
"3. Screencasts")
menu="
1. Fullscreen
2. Window
3. GIF (Fullscreen)
4. GIF (Window)






"
dmenu_t

case "$choice" in
    "1. Fullscreen")
         rm -f ~/.local/share/teiler/temp_cast
         echo "$now.webm" > ~/.local/share/teiler/temp_cast
         ffmpeg $ffaudio $encopts $now.webm &
         notify ${time} "Screencast started" & rec_indicator &
   ;;
    "2. Window")
         eval $countd & sleep $(echo $counter1+1 | bc)
         rm -f ~/.local/share/teiler/temp_cast
         echo "$now.webm" > ~/.local/share/teiler/temp_cast
         dimensions
         ffmpeg $ffaudio $encopts $now.webm &
         notify ${time} "Screencast started" & rec_indicator &
   ;;
    "3. GIF (Fullscreen)")
         rm -f ~/.local/share/teiler/temp_cast
         echo "$now.gif" > ~/.local/share/teiler/temp_cast
         byzanz-record -d 9999 $now.gif &
         notify ${time} "Screencast started" & rec_indicator &
   ;;
    "4. GIF (Window)")
         eval $countd & sleep $(echo $counter1+1 | bc)
         rm -f ~/.local/share/teiler/temp_cast
         echo "$now.gif" > ~/.local/share/teiler/temp_cast
         dimensions && byzanz-record -x $x -y $y -w $w -h $h -d 9999 $now.gif &
         notify ${time} "Screencast started" & rec_indicator &
   ;;
*)
$0
esac
;;
"f. Quick Screenshot (Fullscreen)")
    if [ "$quickul" == "1" ]; then 
        if [ "$quickedit" == "1" ]; then
            scrot -d 1 lastimg.png -e "$ul_img"
            eval $x_clip
            notify_ul ${time} "Screenshot uploaded"
            archive_ul
        elif [ "$quickedit" == "0" ]; then
            scrot -d 1 lastimg.png -e "$ul_img"
            eval $x_clip
            notify_ul ${time} "Screenshot uploaded"
            archive_ul
        fi
    elif [ "$quickul" == "0" ]; then
        scrot -d 1 lastimg.png
        archive_img
        if [ "$quickedit" == "1" ]; then
            $edit lastimg.png
            notify ${time} "Screenshot saved"
        elif [ "$quickedit" == "0" ]; then
            notify_ul ${time} "Screenshot saved"
        fi
    fi
    ;;
"a. Quick Screenshot (Area)")
    if [ "$quickul" == "1" ]; then 
        if [ "$quickedit" == "1" ]; then
            scrot -s lastimg.png -e "$edit \$f && $ul_img"
            eval $x_clip
            notify_ul ${time} "Screenshot uploaded"
            archive_ul
        elif [ "$quickedit" == "0" ]; then
            scrot -s lastimg.png -e "$ul_img"
            eval $x_clip
            notify_ul ${time} "Screenshot uploaded"
            archive_ul
        fi
    elif [ "$quickul" == "0" ]; then
        scrot -s lastimg.png
        archive_img
        if [ "$quickedit" == "1" ]; then
            $edit lastimg.png
            notify_ul ${time} "Screenshot saved"
        elif [ "$quickedit" == "0" ]; then
            notify_ul ${time} "Screenshot saved"
        fi
    fi
    ;;
"c. Quick Screencast")
    rm -f ~/.local/share/teiler/temp_cast
    echo "$now.webm" > ~/.local/share/teiler/temp_cast
    ffmpeg $ffaudio $encopts $now.webm &
    notify ${time} "Screencast started" & rec_indicator &
    ;;
"x. Upload Clipboard content (Delayed)")
    if [ $ul == "imgur" ];
        then notify-send "imgur" "imgur does not support text"
    else 
        eval $countd2 & sleep $(echo $counter2+1 | bc)
        xclip -o > clip-$now.txt
        eval $ul_clip
        eval $x_clip
        notify_ul ${time} "Clipboard uploaded"
    fi
   ;;
"k. Stop Recording Of Any Screencast")
    if [ $ul == "imgur" ];
    then notify-send "imgur" "info: imgur does not support upload."
        kill $(pgrep -f x11grab)
        pkill -f rec_indicator
        kill $(pgrep -n dzen2)
        killall byzanz-record
        kill $(pgrep -n dzen2)
        sleep 3
    else
        kill $(pgrep -f x11grab)
        pkill -f rec_indicator
        kill $(pgrep -n dzen2)
        killall byzanz-record
        kill $(pgrep -n dzen2)
        sleep 3
menu="
1. Yes
2. No
"
        dmenu_t

        case "$choice" in
            "1. Yes")
                 eval $ul_vid
                 eval $x_clip
                 notify_ul ${time} "Screencast uploaded"
            ;;
            "2. No)")
                 echo "shutting down..."
            ;;
            *)
        esac
        killall teiler
    fi
    ;;
"i. Copy Last Image To Clipboard")
    imgclip.py "$img_path"/lastimg.png &
    eval $countd3 & sleep $(echo $counter3+1 | bc)
    kill $(pgrep -f imgclip.py)
    ;;
    *)
echo "shutting down..."
esac
